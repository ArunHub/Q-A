General Questions:

1.	What did you learn yesterday/this week?
2.	What excites or interests you about coding?
3.	What is a recent technical challenge you experienced and how did you solve it?
4.	What UI, Security, Performance, SEO, Maintainability or Technology considerations do you make while building a web application or site?
5.	Talk about your preferred development environment.
6.	Which version control systems are you familiar with?
7.	Can you describe your workflow when you create a web page?
8.	If you have 5 different stylesheets, how would you best integrate them into the site?
9.	Can you describe the difference between progressive enhancement and graceful degradation?
<p id="printthis">
  <a href="javascript:window.print()">Print this page</a>
</p>
this works only when js is available. when offline use <noscript>message<noscript> to show the user the problem.
to solve this problem using progressive enhancement, use button, input rather than <a> tag. Because button has scripting functionality
<p id="printthis">Thank you for your order. Please print this page for your records.</p>
<p id="printthis">Thank you for your order. Please print this page for your records.</p>
<script type="text/javascript">
(function(){
  if(document.getElementById){
    var pt = document.getElementById('printthis');
    if(pt && typeof window.print === 'function'){
      var but = document.createElement('input');
      but.setAttribute('type','button');
      but.setAttribute('value','Print this now');
      but.onclick = function(){
        window.print();
      };
      pt.appendChild(but);
    }
  }
})();
</script>
Notice how defensive the script is — we don’t assume anything.
•	By wrapping the whole functionality in an anonymous function and immediately executing it — this is what (function(){})() does — we don’t leave any global variables behind.
•	We test for DOM support and try to get the element we want to add the button to.
•	We then test if the element exists and if the browser has a window object and a print method (by testing if the type of this property is function).
•	If both are true, we create a new click button and apply window.print() as the click event handler.
•	The last step is to add the button to the paragraph.
This will work for every user regardless of technical environment. We never promise the user an interface element that doesn’t work — instead we only show it when it does work.

graceful degradation becomes viable in a few situations:
•	You retrofit an old product and you don’t have the time, access or insight to change or replace it.
•	You just don’t have time to finish a product with full progressive enhancement (often a sign of bad planning or running out of budget).
•	The product you have is an edge case, for example very high traffic sites where every millisecond of performance means a difference of millions of dollars.
•	Your product by definition is so dependent on scripting that it makes more sense to maintain a “basic” version rather than enhancing one (Maps, email clients, feed readers).
In all other cases, progressive enhancement will make both the end users and you happier:
•	Regardless of environment and ability you deliver a product that works.
•	When a new browser comes out or a browser extension becomes widely adopted you can enhance to yet another level without having to touch the original solution — graceful degradation would require you to alter the original solution.
•	You allow technology to be what it is supposed to be — an aid to reach a goal faster than without it, not a “must” to be able to reach a goal in the first place.
•	If you need to add new features, you can do so after checking if they are supported at a certain stage, or you can add it to the most basic level of functionality and make it better in more sophisticated environments. In any case, the maintenance happens at the same spot and not in two different places. Keeping a progressively enhanced product up-to-date is much less work than maintaining two versions.

10.	How would you optimize a website's assets/resources?
11.	How many resources will a browser download from a given domain at a time? => 6
12.	What are the exceptions?
13.	Name 3 ways to decrease page load (perceived or actual load time).
14.	If you jumped on a project and they used tabs and you used spaces, what would you do?
15.	Describe how you would create a simple slideshow page.
16.	If you could master one technology this year, what would it be?
17.	Explain the importance of standards and standards bodies.
18.	What is Flash of Unstyled Content? How do you avoid FOUC?
19.	Explain what ARIA and screenreaders are, and how to make a website accessible.
20.	Explain some of the pros and cons for CSS animations versus JavaScript animations.
21.	What does CORS stand for and what issue does it address?


HTML Questions:
1.	What does a doctype do?
2.	What's the difference between full standards mode, almost standards mode and quirks mode?
3.	What's the difference between HTML and XHTML?
4.	Are there any problems with serving pages as application/xhtml+xml?
5.	How do you serve a page with content in multiple languages?
6.	What kind of things must you be wary of when design or developing for multilingual sites?
7.	What are data- attributes good for?
8.	Consider HTML5 as an open web platform. What are the building blocks of HTML5?
9.	Describe the difference between a cookie, sessionStorage and localStorage.
10.	Describe the difference between <script>, <script async> and <script defer>.
11.	Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?
12.	What is progressive rendering?
13.	Why you would use a srcset attribute in an image tag? Explain the process the browser uses when evaluating the content of this attribute.
14.	Have you used different HTML templating languages before?

CSS Questions:
1.	What is the difference between classes and IDs in CSS?
2.	What's the difference between "resetting" and "normalizing" CSS? Which would you choose, and why?
3.	Describe CSS Grid Layout, Flexbox, and when to use each one.
4.	Describe z-index and how stacking context is formed.
5.	Describe BFC (Block Formatting Context) and how it works.
6.	What are the various clearing techniques and which is appropriate for what context?
7.	Explain CSS sprites, and how you would implement them on a page or site.
8.	What are some drawbacks of CSS sprites that are solved with a modern SVG workflow?
9.	What are your favourite image replacement techniques and which do you use when?
10.	How would you approach fixing browser-specific styling issues?
11.	How do you serve your pages for feature-constrained browsers?
12.	What techniques/processes do you use?
13.	What are the different ways to visually hide content (and make it available only for screen readers)?
14.	Have you ever used a grid system, and if so, what do you prefer?
15.	Have you used or implemented media queries or mobile specific layouts/CSS?
16.	Are you familiar with styling SVG?
17.	How do you optimize your webpages for print?
18.	What are some of the "gotchas" for writing efficient CSS?
19.	What are the advantages/disadvantages of using CSS preprocessors?
20.	Describe what you like and dislike about the CSS preprocessors you have used.
21.	How would you implement a web design comp that uses non-standard fonts?
22.	Explain how a browser determines what elements match a CSS selector.
23.	Describe pseudo-elements and discuss what they are used for.
24.	Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.
25.	What does * { box-sizing: border-box; } do? What are its advantages?
26.	List as many values for the display property that you can remember.
27.	What's the difference between inline and inline-block?
28.	What's the difference between a relative, fixed, absolute and statically positioned element?
29.	The 'C' in CSS stands for Cascading. How is priority determined in assigning styles (a few examples)? How can you use this system to your advantage?
30.	What existing CSS frameworks have you used locally, or in production? How would you change/improve them?
31.	Have you played around with the new CSS Flexbox or Grid specs?
32.	How is responsive design different from adaptive design?
33.	Have you ever worked with retina graphics? If so, when and what techniques did you use?
34.	Is there any reason you'd want to use translate() instead of absolute positioning, or vice-versa? And why?

JS Questions:
1.	Explain event delegation
2.	Explain how this works in JavaScript
3.	Explain how prototypal inheritance works
4.	What do you think of AMD vs CommonJS?
5.	Explain why the following doesn't work as an IIFE: function foo(){ }();.
6.	What needs to be changed to properly make it an IIFE?
7.	What's the difference between a variable that is: null, undefined or undeclared?
8.	How would you go about checking for any of these states?
9.	What is a closure, and how/why would you use one?
10.	Can you describe the main difference between a forEach loop and a .map() loop and why you would pick one versus the other?
11.	What's a typical use case for anonymous functions?
12.	How do you organize your code? (module pattern, classical inheritance?)
13.	What's the difference between host objects and native objects?
14.	Difference between: function Person(){}, var person = Person(), and var person = new Person()?
15.	What's the difference between .call and .apply?
16.	Explain Function.prototype.bind.
17.	When would you use document.write()?
18.	What's the difference between feature detection, feature inference, and using the UA string?
19.	Explain Ajax in as much detail as possible.
20.	What are the advantages and disadvantages of using Ajax?
21.	Explain how JSONP works (and how it's not really Ajax).
22.	Have you ever used JavaScript templating?
23.	If so, what libraries have you used?
24.	Explain "hoisting".
25.	Describe event bubbling.
26.	What's the difference between an "attribute" and a "property"?
27.	Why is extending built-in JavaScript objects not a good idea?
28.	Difference between document load event and document DOMContentLoaded event?
29.	What is the difference between == and ===?
30.	Explain the same-origin policy with regards to JavaScript.
31.	Make this work:
32.	duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5]
33.	Why is it called a Ternary expression, what does the word "Ternary" indicate?
34.	What is "use strict";? what are the advantages and disadvantages to using it?
35.	Create a for loop that iterates up to 100 while outputting "fizz" at multiples of 3, "buzz" at multiples of 5 and "fizzbuzz" at multiples of 3 and 5
36.	Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?
37.	Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?
38.	Explain what a single page app is and how to make one SEO-friendly.
39.	What is the extent of your experience with Promises and/or their polyfills?
40.	What are the pros and cons of using Promises instead of callbacks?
41.	What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?
42.	What tools and techniques do you use debugging JavaScript code?
43.	What language constructions do you use for iterating over object properties and array items?
44.	Explain the difference between mutable and immutable objects.
45.	What is an example of an immutable object in JavaScript?
46.	What are the pros and cons of immutability?
47.	How can you achieve immutability in your own code?
48.	Explain the difference between synchronous and asynchronous functions.
49.	What is event loop?
50.	What is the difference between call stack and task queue?
51.	Explain the differences on the usage of foo between function foo() {} and var foo = function() {}
52.	What are the differences between variables created using let, var or const?
53.	Testing Questions:
54.	What are some advantages/disadvantages to testing your code?
55.	What tools would you use to test your code's functionality?
56.	What is the difference between a unit test and a functional/integration test?
57.	What is the purpose of a code style linting tool?
58.	Performance Questions:
59.	What tools would you use to find a performance bug in your code?
60.	What are some ways you may improve your website's scrolling performance?
61.	Explain the difference between layout, painting and compositing.

Network Questions:
Traditionally, why has it been better to serve site assets from multiple domains?
Do your best to describe the process from the time you type in a website's URL to it finishing loading on your screen.
What are the differences between Long-Polling, Websockets and Server-Sent Events?
Explain the following request and response headers:
Diff. between Expires, Date, Age and If-Modified-...
Do Not Track
Cache-Control
Transfer-Encoding
ETag
X-Frame-Options
What are HTTP methods? List all HTTP methods that you know, and explain them.


Coding Questions:
Question: What is the value of foo?

var foo = 10 + '20';
Question: What will be the output of the code below?

console.log(0.1 + 0.2 == 0.3);
Question: How would you make this work?

add(2, 5); // 7
add(2)(5); // 7
Question: What value is returned from the following statement?

"i'm a lasagna hog".split("").reverse().join("");
Question: What is the value of window.foo?

( window.foo || ( window.foo = "bar" ) );
Question: What is the outcome of the two alerts below?

var foo = "Hello";
(function() {
  var bar = " World";
  alert(foo + bar);
})();
alert(foo + bar);
Question: What is the value of foo.length?

var foo = [];
foo.push(1);
foo.push(2);
Question: What is the value of foo.x?

var foo = {n: 1};
var bar = foo;
foo.x = foo = {n: 2};
Question: What does the following code print?

console.log('one');
setTimeout(function() {
  console.log('two');
}, 0);
console.log('three');
Question: What is the difference between these four promises?

doSomething().then(function () {
  return doSomethingElse();
});

doSomething().then(function () {
  doSomethingElse();
});

doSomething().then(doSomethingElse());

doSomething().then(doSomethingElse);


Fun Questions:
1.	What's a cool project that you've recently worked on?
2.	What are some things you like about the developer tools you use?
3.	Who inspires you in the front-end community?
4.	Do you have any pet projects? What kind?
5.	What's your favorite feature of Internet Explorer?
6.	How do you like your coffee?
